{"version":3,"file":"bundle.umd.js","sources":["../src/node_browser_detect_agent.ts","../src/node_browser_detect_agent_node.ts","../src/node_browser_detect_agent_info.ts"],"sourcesContent":["import { AgentFunction } from \"graphai\";\nimport { EnvConfig, EnvFunc } from \"./type\";\n\nexport const nodeBrowserDetectAgentGenerator = (isNode: boolean, envConf: EnvConfig, envFunc: EnvFunc) => {\n  const nodeBrowserDetectAgent: AgentFunction = async ({ params, namedInputs }) => {\n    console.log(isNode);\n    console.log(envConf);\n    console.log(envFunc());\n    return { params, namedInputs };\n  };\n  return nodeBrowserDetectAgent;\n};\n","import { nodeBrowserDetectAgentGenerator } from \"./node_browser_detect_agent\";\nimport { nodeBrowserDetectAgentInfoGenerator } from \"./node_browser_detect_agent_info\";\nimport { EnvConfig, EnvFunc } from \"./type\";\n\nconst envConf: EnvConfig = {\n  envType: \"Node\",\n};\n\nconst envFunc: EnvFunc = () => {\n  return { message: \"isnode\" };\n};\n\nexport const nodeBrowserDetectAgent = nodeBrowserDetectAgentGenerator(true, envConf, envFunc);\n\nconst nodeBrowserDetectAgentInfo = nodeBrowserDetectAgentInfoGenerator(nodeBrowserDetectAgent);\n\nexport default nodeBrowserDetectAgentInfo;\n","import { AgentFunctionInfo, AgentFunction } from \"graphai\";\n\nconst nodeBrowserDetectAgentInfoGenerator = (nodeBrowserDetectAgent: AgentFunction) => {\n  const nodeBrowserDetectAgentInfo: AgentFunctionInfo = {\n    name: \"nodeBrowserDetectAgent\",\n    agent: nodeBrowserDetectAgent,\n    mock: nodeBrowserDetectAgent,\n    samples: [\n      {\n        params: { a: \"1\" },\n        inputs: { b: \"2\" },\n        result: {\n          params: { a: \"1\" },\n          namedInputs: { b: \"2\" },\n        },\n      },\n    ],\n    description: \"test agent\",\n    category: [\"general\"],\n    author: \"Receptron Team\",\n    repository: \"https://github.com/receptron/graphai/\",\n    license: \"MIT\",\n  };\n  return nodeBrowserDetectAgentInfo;\n};\n\nexport { nodeBrowserDetectAgentInfoGenerator };\n"],"names":["nodeBrowserDetectAgent","isNode","envConf","envFunc","async","params","namedInputs","console","log","nodeBrowserDetectAgentGenerator","envType","message","nodeBrowserDetectAgentInfo","name","agent","mock","samples","a","inputs","b","result","description","category","author","repository","license","nodeBrowserDetectAgentInfoGenerator"],"mappings":"+OAGO,MCSMA,EDTkC,EAACC,EAAiBC,EAAoBC,IACrCC,OAASC,SAAQC,kBAC7DC,QAAQC,IAAIP,GACZM,QAAQC,IAAIN,GACZK,QAAQC,IAAIL,KACL,CAAEE,SAAQC,gBCIiBG,EAAgC,EAR3C,CACzBC,QAAS,SAGc,KAChB,CAAEC,QAAS,aAKdC,ECZsC,CAACZ,IACW,CACpDa,KAAM,yBACNC,MAAOd,EACPe,KAAMf,EACNgB,QAAS,CACP,CACEX,OAAQ,CAAEY,EAAG,KACbC,OAAQ,CAAEC,EAAG,KACbC,OAAQ,CACNf,OAAQ,CAAEY,EAAG,KACbX,YAAa,CAAEa,EAAG,QAIxBE,YAAa,aACbC,SAAU,CAAC,WACXC,OAAQ,iBACRC,WAAY,wCACZC,QAAS,QDPsBC,CAAoC1B"}